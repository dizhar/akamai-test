{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2020-02-03T15:09:44.845Z",
    "end": "2020-02-03T15:10:57.145Z",
    "duration": 72300,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "52d7cefc-9ad2-4720-936f-039a5433c86b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
          "title": "Test Delta website with injectable: ",
          "fullFile": "C:\\akamai-test\\lib\\index.js",
          "file": "\\lib\\index.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Test Delta website with injectable:  \"before each\" hook",
              "timedOut": false,
              "duration": 7003,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4, launchPuppeteer_1.default()];\n                case 1:\n                    browser = _a.sent();\n                    return [4, browser.newPage()];\n                case 2:\n                    page = _a.sent();\n                    _puppeteerSet = new pupppeteerSet_1.default(page);\n                    _puppeteerVerify = new puppeteerVerify_1.default(page);\n                    return [4, _puppeteerSet.loadPage(baseURL, 30000)];\n                case 3:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });",
              "err": {},
              "uuid": "e0fb281d-1ffe-4732-9a64-c42561d8d054",
              "parentUUID": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Test Delta website with injectable:  \"after each\" hook",
              "timedOut": false,
              "duration": 632,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4, browser.close()];\n                case 1:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });",
              "err": {},
              "uuid": "6259a085-ff73-46a0-8e1b-957c0f166ca2",
              "parentUUID": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should not get a page error message and performance should be normal, when not adding the injectable.js script",
              "fullTitle": "Test Delta website with injectable:  Should not get a page error message and performance should be normal, when not adding the injectable.js script",
              "timedOut": false,
              "duration": 3190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var listOfErrors;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4, _puppeteerVerify.verifyPageErrors()];\n                case 1:\n                    listOfErrors = _a.sent();\n                    return [4, _puppeteerVerify.verifyNoUnexpectedErrors(listOfErrors)];\n                case 2:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyWebPagePerformance()];\n                case 3:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });",
              "err": {},
              "uuid": "d826b07b-af75-4448-a234-40983ae9ff0d",
              "parentUUID": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get page error message, \"Error: CX Internals not found...\", when adding the injectable.js script",
              "fullTitle": "Test Delta website with injectable:  Should get page error message, \"Error: CX Internals not found...\", when adding the injectable.js script",
              "timedOut": false,
              "duration": 3440,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4, _puppeteerVerify.verifyPageErrors(\"Error: CX Internals not found\")];\n                case 1:\n                    _a.sent();\n                    return [4, _puppeteerSet.addScriptTpPage(\"./lib/files/injectable.js\")];\n                case 2:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyWebPagePerformance()];\n                case 3:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });",
              "err": {},
              "uuid": "bf557760-b897-403b-b625-578fa3ef25ed",
              "parentUUID": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not get a page error, when not adding the injectable.js script into the login page ",
              "fullTitle": "Test Delta website with injectable:  Should not get a page error, when not adding the injectable.js script into the login page ",
              "timedOut": false,
              "duration": 5951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var listOfErrors;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4, _puppeteerSet.loadPage(\"\" + loginSelectors.URL, 5000)];\n                case 1:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyPageErrors()];\n                case 2:\n                    listOfErrors = _a.sent();\n                    return [4, _puppeteerVerify.verifyNoUnexpectedErrors(listOfErrors)];\n                case 3:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyWebPagePerformance()];\n                case 4:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });",
              "err": {},
              "uuid": "e94849d2-e40d-4bfd-bc93-51a003cdf4f8",
              "parentUUID": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get page error message, \"Error: CX Internals not found...\", when adding the injectable.js script into the https://www.delta.com/login/loginPage",
              "fullTitle": "Test Delta website with injectable:  Should get page error message, \"Error: CX Internals not found...\", when adding the injectable.js script into the https://www.delta.com/login/loginPage",
              "timedOut": false,
              "duration": 7374,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4, _puppeteerSet.loadPage(loginSelectors.URL, 5000)];\n                case 1:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyPageErrors(\"Error: CX Internals not found\")];\n                case 2:\n                    _a.sent();\n                    return [4, _puppeteerSet.addScriptTpPage(\"./lib/files/injectable.js\")];\n                case 3:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });",
              "err": {},
              "uuid": "91d86772-618b-472a-a25d-abffdd076f96",
              "parentUUID": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get an error message, when submiting incorrect username and password",
              "fullTitle": "Test Delta website with injectable:  Should get an error message, when submiting incorrect username and password",
              "timedOut": false,
              "duration": 8713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(void 0, void 0, void 0, function () {\n        var listOfErrors;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4, _puppeteerSet.loadPage(loginSelectors.URL, 5000)];\n                case 1:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyPageErrors()];\n                case 2:\n                    listOfErrors = _a.sent();\n                    return [4, _puppeteerSet.click(selectors.username)];\n                case 3:\n                    _a.sent();\n                    return [4, _puppeteerSet.write(selectors.username, loginSelectors.wrongUsername)];\n                case 4:\n                    _a.sent();\n                    return [4, _puppeteerSet.write(selectors.lastname, loginSelectors.wongSurename)];\n                case 5:\n                    _a.sent();\n                    return [4, _puppeteerSet.write(selectors.password, loginSelectors.wrongPassword)];\n                case 6:\n                    _a.sent();\n                    return [4, _puppeteerSet.click(selectors.submitButton)];\n                case 7:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyNoUnexpectedErrors(listOfErrors)];\n                case 8:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyElementToDisappear(selectors.loadingSpinner)];\n                case 9:\n                    _a.sent();\n                    return [4, _puppeteerVerify.verifyTextIsDisplayed(selectors.errMessage, loginSelectors.errorMessage)];\n                case 10:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });",
              "err": {},
              "uuid": "35b06da6-78bd-4394-abda-a0e4d11a2576",
              "parentUUID": "94c827ee-5c06-4bbe-b08f-94400d8b4dbc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d826b07b-af75-4448-a234-40983ae9ff0d",
            "bf557760-b897-403b-b625-578fa3ef25ed",
            "e94849d2-e40d-4bfd-bc93-51a003cdf4f8",
            "91d86772-618b-472a-a25d-abffdd076f96",
            "35b06da6-78bd-4394-abda-a0e4d11a2576"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28668,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}